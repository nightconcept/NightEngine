name: Release Night Library (GitHub Release)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Semantic Version for the release (e.g., 1.0.0, 1.0.0-beta.1). This is the pure SemVer.'
        required: true
        type: string

permissions:
  contents: write # To create commits, tags, and releases

jobs:
  release:
    name: Build and Create GitHub Release for Night Library
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      SOLUTION_FILE_PATH: Night.sln
      MAIN_PROJECT_FILE_PATH: src/Night/Night.csproj
      VERSION_INFO_FILE_PATH: src/Night/VersionInfo.cs # Path to the version C# file
      TEST_PROJECT_FILE_PATH: tests/Night.Tests/Night.Tests.csproj
      PACKAGE_OUTPUT_DIR: ./packages

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to analyze history

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Validate Version Input (SemVer)
        run: |
          version_input="${{ github.event.inputs.version }}"
          semver_regex="^([0-9]+)\\.([0-9]+)\\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?(?:\\+([0-9A-Za-z-]+(?:\\.[0-9A-Za-z-]+)*))?$"
          if [[ ! "$version_input" =~ $semver_regex ]]; then
            echo "Error: Invalid version format. Input must be a pure Semantic Version (e.g., 1.0.0, 1.2.3-beta.1)."
            exit 1
          fi
          echo "SemVer input '$version_input' is valid."
        shell: bash

      - name: Update Version in .csproj
        id: update_version_csproj
        run: |
          $newSemVer = "${{ github.event.inputs.version }}"
          $projectFilePath = "${{ env.MAIN_PROJECT_FILE_PATH }}"
          Write-Host "Attempting to update <Version> in '$projectFilePath' to '$newSemVer'"
          [xml]$csproj = Get-Content -Path $projectFilePath -Raw
          $versionNode = $csproj.SelectSingleNode("//PropertyGroup/Version")
          if (-not $versionNode) {
              $propertyGroupNode = $csproj.SelectSingleNode("//PropertyGroup")
              if (-not $propertyGroupNode) {
                  $propertyGroupNode = $csproj.CreateElement("PropertyGroup")
                  $csproj.Project.AppendChild($propertyGroupNode) | Out-Null
              }
              $versionNode = $csproj.CreateElement("Version")
              $propertyGroupNode.AppendChild($versionNode) | Out-Null
          }
          $versionNode.'#text' = $newSemVer
          $csproj.Save($projectFilePath)
          Write-Host "Saved <Version> $newSemVer to '$projectFilePath'"
          echo "version_tag=v$newSemVer" >> $GITHUB_OUTPUT
        shell: pwsh

      - name: Update Version in VersionInfo.cs
        run: |
          $newSemVer = "${{ github.event.inputs.version }}"
          $versionInfoFilePath = "${{ env.VERSION_INFO_FILE_PATH }}"
          Write-Host "Attempting to update Version constant in '$versionInfoFilePath' to '$newSemVer'"
          $content = Get-Content $versionInfoFilePath -Raw
          # Regex to find 'public const string Version = ".*";' and replace the version string part
          $updatedContent = $content -replace '(?<=public const string Version = ")([^"]*)(?=";)', $newSemVer
          Set-Content -Path $versionInfoFilePath -Value $updatedContent
          Write-Host "Updated Version constant in '$versionInfoFilePath'"
        shell: pwsh

      - name: Commit Version Changes
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git add "${{ env.MAIN_PROJECT_FILE_PATH }}" # .csproj
          git add "${{ env.VERSION_INFO_FILE_PATH }}" # VersionInfo.cs
          git commit -m "Update version to ${{ github.event.inputs.version }} [skip ci]"
          echo "Committed version updates for ${{ github.event.inputs.version }}"
        shell: bash

      - name: Create Git Tag
        run: |
          git tag "${{ steps.update_version_csproj.outputs.version_tag }}"
          echo "Created git tag ${{ steps.update_version_csproj.outputs.version_tag }}"
        shell: bash

      - name: Push Commit and Tag
        run: |
          git push origin HEAD:main --follow-tags
          echo "Pushed commit and tag to remote."
        shell: bash

      - name: Build Solution
        run: dotnet build "${{ env.SOLUTION_FILE_PATH }}" -c Release /p:Version="${{ github.event.inputs.version }}"

      - name: Run Tests
        run: dotnet test "${{ env.SOLUTION_FILE_PATH }}" --no-build -c Release

      - name: Create Package Output Directory
        run: mkdir -p "${{ env.PACKAGE_OUTPUT_DIR }}"

      - name: Package Library
        run: |
          dotnet pack "${{ env.MAIN_PROJECT_FILE_PATH }}" `
            --no-build `
            -c Release `
            -o "${{ env.PACKAGE_OUTPUT_DIR }}" `
            /p:Version="${{ github.event.inputs.version }}" `
            /p:IncludeSymbols=true `
            /p:SymbolPackageFormat=snupkg
        shell: pwsh

      - name: List Packaged Files
        run: ls -R "${{ env.PACKAGE_OUTPUT_DIR }}"
        shell: bash

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION_TAG: ${{ steps.update_version_csproj.outputs.version_tag }}
          RELEASE_VERSION: ${{ github.event.inputs.version }}
        run: |
          gh release create "$VERSION_TAG" \
            "${{ env.PACKAGE_OUTPUT_DIR }}"/*.nupkg \
            "${{ env.PACKAGE_OUTPUT_DIR }}"/*.snupkg \
            --title "Release $RELEASE_VERSION" \
            --notes "Night Engine Release $RELEASE_VERSION" \
            --draft=false \
            --prerelease=$([[ "$RELEASE_VERSION" == *-* ]] && echo true || echo false)
        shell: bash
