// <copyright file="Types.cs" company="PlaceholderCompany">
// Copyright (c) PlaceholderCompany. All rights reserved.
// </copyright>

using System;

namespace Night
{
  /// <summary>
  /// Interface for a game that can be run by the Night Engine.
  /// Game developers will implement this interface in their main game class.
  /// </summary>
  public interface IGame
  {
    /// <summary>
    /// Called exactly once when the game starts for loading resources.
    /// </summary>
    void Load();

    /// <summary>
    /// Callback function used to update the state of the game every frame.
    /// </summary>
    /// <param name="deltaTime">The time elapsed since the last frame, in seconds.</param>
    void Update(double deltaTime);

    /// <summary>
    /// Callback function used to draw on the screen every frame.
    /// </summary>
    void Draw();

    /// <summary>
    /// Callback function triggered when a key is pressed.
    /// </summary>
    /// <param name="key">The logical key symbol that was pressed.</param>
    /// <param name="scancode">The physical key (scancode) that was pressed.</param>
    /// <param name="isRepeat">True if this is a key repeat event, false otherwise.</param>
    void KeyPressed(KeySymbol key, KeyCode scancode, bool isRepeat);

    /// <summary>
    /// Callback function triggered when a key is released.
    /// </summary>
    /// <param name="key">The logical key symbol that was released.</param>
    /// <param name="scancode">The physical key (scancode) that was released.</param>
    void KeyReleased(KeySymbol key, KeyCode scancode)
    { /* Optional: Default empty implementation */
    }

    /// <summary>
    /// Callback function triggered when a mouse button is pressed.
    /// </summary>
    /// <param name="x">The x-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="y">The y-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="button">The mouse button that was pressed.</param>
    /// <param name="istouch">True if the event was generated by a touch input device, false otherwise.</param>
    /// <param name="presses">The number of clicks (1 for single-click, 2 for double-click, etc.).</param>
    void MousePressed(int x, int y, MouseButton button, bool istouch, int presses)
    { /* Optional: Default empty implementation */
    }

    /// <summary>
    /// Callback function triggered when a mouse button is released.
    /// </summary>
    /// <param name="x">The x-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="y">The y-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="button">The mouse button that was released.</param>
    /// <param name="istouch">True if the event was generated by a touch input device, false otherwise.</param>
    /// <param name="presses">The number of clicks (typically 1 for release, but may vary).</param>
    void MouseReleased(int x, int y, MouseButton button, bool istouch, int presses)
    { /* Optional: Default empty implementation */
    }
  }
}
