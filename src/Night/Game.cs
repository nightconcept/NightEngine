// <copyright file="Game.cs" company="Night Circle">
// zlib license
//
// Copyright (c) 2025 Danny Solivan, Night Circle
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgment in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// </copyright>

namespace Night
{
  /// <summary>
  /// Base class for a game that can be run by the Night Engine.
  /// Game developers can inherit from this class and override specific methods
  /// to implement their game logic, rather than implementing all methods from <see cref="IGame"/>.
  /// </summary>
  public abstract class Game : IGame
  {
    /// <summary>
    /// Called exactly once when the game starts for loading resources.
    /// Override this method to load game-specific assets.
    /// </summary>
    public virtual void Load()
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function used to update the state of the game every frame.
    /// Override this method to implement game logic.
    /// </summary>
    /// <param name="deltaTime">The time elapsed since the last frame, in seconds.</param>
    public virtual void Update(double deltaTime)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function used to draw on the screen every frame.
    /// Override this method to render game visuals.
    /// </summary>
    public virtual void Draw()
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a key is pressed.
    /// Override this method to handle key press events.
    /// </summary>
    /// <param name="key">The logical key symbol that was pressed.</param>
    /// <param name="scancode">The physical key (scancode) that was pressed.</param>
    /// <param name="isRepeat">True if this is a key repeat event, false otherwise.</param>
    public virtual void KeyPressed(KeySymbol key, KeyCode scancode, bool isRepeat)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a key is released.
    /// Override this method to handle key release events.
    /// </summary>
    /// <param name="key">The logical key symbol that was released.</param>
    /// <param name="scancode">The physical key (scancode) that was released.</param>
    public virtual void KeyReleased(KeySymbol key, KeyCode scancode)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a mouse button is pressed.
    /// Override this method to handle mouse button press events.
    /// </summary>
    /// <param name="x">The x-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="y">The y-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="button">The mouse button that was pressed.</param>
    /// <param name="istouch">True if the event was generated by a touch input device, false otherwise.</param>
    /// <param name="presses">The number of clicks (1 for single-click, 2 for double-click, etc.).</param>
    public virtual void MousePressed(int x, int y, MouseButton button, bool istouch, int presses)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a mouse button is released.
    /// Override this method to handle mouse button release events.
    /// </summary>
    /// <param name="x">The x-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="y">The y-coordinate of the mouse cursor relative to the window.</param>
    /// <param name="button">The mouse button that was released.</param>
    /// <param name="istouch">True if the event was generated by a touch input device, false otherwise.</param>
    /// <param name="presses">The number of clicks (typically 1 for release, but may vary).</param>
    public virtual void MouseReleased(int x, int y, MouseButton button, bool istouch, int presses)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a joystick is connected.
    /// Override this method to handle joystick connection events.
    /// </summary>
    /// <param name="joystick">The Joystick object representing the connected device.</param>
    public virtual void JoystickAdded(Joystick joystick)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a joystick is disconnected.
    /// Override this method to handle joystick disconnection events.
    /// </summary>
    /// <param name="joystick">The Joystick object representing the disconnected device.</param>
    public virtual void JoystickRemoved(Joystick joystick)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a joystick axis moves.
    /// Override this method to handle joystick axis motion events.
    /// </summary>
    /// <param name="joystick">The Joystick object.</param>
    /// <param name="axis">The index of the axis that moved.</param>
    /// <param name="value">The new value of the axis, typically in the range -1.0 to 1.0.</param>
    public virtual void JoystickAxis(Joystick joystick, int axis, float value)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a joystick button is pressed.
    /// Override this method to handle joystick button press events.
    /// </summary>
    /// <param name="joystick">The Joystick object.</param>
    /// <param name="button">The index of the button that was pressed.</param>
    public virtual void JoystickPressed(Joystick joystick, int button)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a joystick button is released.
    /// Override this method to handle joystick button release events.
    /// </summary>
    /// <param name="joystick">The Joystick object.</param>
    /// <param name="button">The index of the button that was released.</param>
    public virtual void JoystickReleased(Joystick joystick, int button)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a joystick hat direction changes.
    /// Override this method to handle joystick hat motion events.
    /// </summary>
    /// <param name="joystick">The Joystick object.</param>
    /// <param name="hat">The index of the hat that changed.</param>
    /// <param name="direction">The new direction of the hat.</param>
    public virtual void JoystickHat(Joystick joystick, int hat, JoystickHat direction)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a virtual gamepad axis is moved.
    /// Override this method to handle gamepad axis motion events.
    /// </summary>
    /// <param name="joystick">The Joystick object (which is also a gamepad).</param>
    /// <param name="axis">The virtual gamepad axis that moved.</param>
    /// <param name="value">The new value of the axis, typically in the range -1.0 to 1.0.</param>
    public virtual void GamepadAxis(Joystick joystick, GamepadAxis axis, float value)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a virtual gamepad button is pressed.
    /// Override this method to handle gamepad button press events.
    /// </summary>
    /// <param name="joystick">The Joystick object (which is also a gamepad).</param>
    /// <param name="button">The virtual gamepad button that was pressed.</param>
    public virtual void GamepadPressed(Joystick joystick, GamepadButton button)
    {
      // Default implementation is empty.
    }

    /// <summary>
    /// Callback function triggered when a virtual gamepad button is released.
    /// Override this method to handle gamepad button release events.
    /// </summary>
    /// <param name="joystick">The Joystick object (which is also a gamepad).</param>
    /// <param name="button">The virtual gamepad button that was released.</param>
    public virtual void GamepadReleased(Joystick joystick, GamepadButton button)
    {
      // Default implementation is empty.
    }
  }
}
