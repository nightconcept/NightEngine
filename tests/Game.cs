// <copyright file="Game.cs" company="Night Circle">
// zlib license
//
// Copyright (c) 2025 Danny Solivan, Night Circle
//
// This software is provided 'as-is', without any express or implied
// warranty. In no event will the authors be held liable for any damages
// arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented; you must not
//    claim that you wrote the original software. If you use this software
//    in a product, an acknowledgment in the product documentation would be
//    appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
//    misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// </copyright>

using System;
using System.IO;

using Night;

namespace TestGame;

/// <summary>
/// Main game class for Night.TestGame.
/// Implements the <see cref="IGame"/> interface for Night.Framework integration.
/// This class will be used to host various test scenarios.
/// </summary>
public class Game : IGame
{
  /// <summary>
  /// Handles key release events.
  /// Called by Night.Framework when a key is released.
  /// </summary>
  /// <param name="key">The <see cref="KeySymbol"/> of the released key.</param>
  /// <param name="scancode">The <see cref="KeyCode"/> (physical key code) of the released key.</param>
  public static void KeyReleased(KeySymbol key, KeyCode scancode)
  {
    // Console.WriteLine($"Night.TestGame: KeyReleased - Key: {key}, Scancode: {scancode}");
  }

  /// <summary>
  /// Handles mouse button press events.
  /// Called by Night.Framework when a mouse button is pressed.
  /// </summary>
  /// <param name="x">The x-coordinate of the mouse cursor.</param>
  /// <param name="y">The y-coordinate of the mouse cursor.</param>
  /// <param name="button">The <see cref="MouseButton"/> that was pressed.</param>
  /// <param name="istouch">True if the event was generated by a touch input, false otherwise.</param>
  /// <param name="presses">The number of clicks (1 for single-click, 2 for double-click, etc.).</param>
  public static void MousePressed(int x, int y, MouseButton button, bool istouch, int presses)
  {
    // Console.WriteLine($"Night.TestGame: MousePressed - X: {x}, Y: {y}, Button: {button}, IsTouch: {istouch}, Presses: {presses}");
  }

  /// <summary>
  /// Handles mouse button release events.
  /// Called by Night.Framework when a mouse button is released.
  /// </summary>
  /// <param name="x">The x-coordinate of the mouse cursor.</param>
  /// <param name="y">The y-coordinate of the mouse cursor.</param>
  /// <param name="button">The <see cref="MouseButton"/> that was released.</param>
  /// <param name="istouch">True if the event was generated by a touch input, false otherwise.</param>
  /// <param name="presses">The number of clicks (should be 1 for release events).</param>
  public static void MouseReleased(int x, int y, MouseButton button, bool istouch, int presses)
  {
    // Console.WriteLine($"Night.TestGame: MouseReleased - X: {x}, Y: {y}, Button: {button}, IsTouch: {istouch}, Presses: {presses}");
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="Game"/> class.
  /// </summary>
  public Game()
  {
    // TestReporter and testMode logic removed
  }

  /// <summary>
  /// Loads game assets and initializes game state.
  /// Called once at the start of the game by Night.Framework.
  /// </summary>
  public void Load()
  {
    Window.SetTitle("Night.TestGame - Minimal");
  }

  /// <summary>
  /// Updates the game state.
  /// Called every frame by Night.Framework.
  /// </summary>
  /// <param name="deltaTime">The time elapsed since the last frame, in seconds.</param>
  public void Update(double deltaTime)
  {
    // Test logic removed
  }

  /// <summary>
  /// Draws the game scene.
  /// Called every frame by Night.Framework after Update.
  /// </summary>
  public void Draw()
  {
    Graphics.Clear(Night.Color.Black); // Changed to a defined color
    Graphics.Present();
  }

  /// <summary>
  /// Handles key press events.
  /// Called by Night.Framework when a key is pressed.
  /// </summary>
  /// <param name="key">The <see cref="KeySymbol"/> of the pressed key.</param>
  /// <param name="scancode">The <see cref="KeyCode"/> (physical key code) of the pressed key.</param>
  /// <param name="isRepeat">True if this is a repeat key event, false otherwise.</param>
  public void KeyPressed(KeySymbol key, KeyCode scancode, bool isRepeat)
  {
    if (key == KeySymbol.Escape)
    {
      Window.Close();
    }

    // Console.WriteLine($"Night.TestGame: KeyPressed - Key: {key}, Scancode: {scancode}, Repeat: {isRepeat}");
  }

  // Optional: Implement other IGame interface methods if needed
  // public void MouseMoved(int x, int y, int dx, int dy, bool istouch) { }
  // public void MouseWheelMoved(int x, int y) { }
  // public void TextInput(string text) { }
  // public void TextEditing(string text, int start, int length) { }
  // public void DirectoryDropped(string path) { }
  // public void FileDropped(string path) { }
  // public void WindowFocusGained() { }
  // public void WindowFocusLost() { }
  // public void WindowResized(int width, int height) { }
  // public void WindowMoved(int x, int y) { }
  // public void Quit() { }
}
